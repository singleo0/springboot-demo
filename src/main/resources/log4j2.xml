<?xml version="1.0" encoding="UTF-8" ?>
<!--
    status="warn" 日志框架本身的输出日志级别，可以修改为debug
    monitorInterval="5" 自动加载配置文件的间隔时间，不低于 5秒；生产环境中修改配置文件，是热更新，无需重启应用
 -->
<configuration status="warn" monitorInterval="5">
    <!--
    集中配置属性进行管理
    使用时通过:${name}
    -->
    <properties>
        <property name="LOG_FILE_NAME">sb-demo</property>
        <property name="LOG_HOME">./logs</property>
<!--        <property name="LOG_PATTERN">%d{yyyy-MM-dd HH:mm:ss.SSS}[%thread][%-5level]%logger{36}.%M(): %msg%n</property>-->
        <property name="LOG_PATTERN">[%d{yyyy-MM-dd HH:mm:ss.SSS}][%-5p][%t][evtTraceId=%X{evtTraceId}][%l] - %msg%n</property>
    </properties>

    <!-- 日志处理 -->
    <Appenders>
        <!-- 控制台输出 appender，SYSTEM_OUT输出黑色，SYSTEM_ERR输出红色 -->
        <Console name="Console" target="SYSTEM_OUT">
            <PatternLayout pattern="${LOG_PATTERN}" />
        </Console>

        <!-- 日志文件输出 appender -->
<!--        <File name="file" fileName="${LOG_HOME}/file-server.log">-->
<!--            <PatternLayout pattern="${LOG_PATTERN}" />-->
<!--        </File>-->

        <!--        &lt;!&ndash; 使用随机读写流的日志文件输出 appender，性能提高 &ndash;&gt;-->
        <!--        <RandomAccessFile name="accessFile" fileName="${LOG_HOME}/workflow-extend-acc.log">-->
        <!--            <PatternLayout pattern="${LOG_PATTERN}" />-->
        <!--        </RandomAccessFile>-->

        <!--        &lt;!&ndash; 按照一定规则拆分的日志文件的appender &ndash;&gt;  &lt;!&ndash; 拆分后的文件 &ndash;&gt;-->
        <!--        &lt;!&ndash; filePattern="${LOG_HOME}/$${date:yyyy-MM-dd}/myrollog-%d{yyyy-MM-dd-HH-mm}-%i.log"> &ndash;&gt;-->
        <RollingFile name="rollingFile" fileName="${LOG_HOME}/${LOG_FILE_NAME}-rol.log"
                     filePattern="${LOG_HOME}/$${date:yyyy-MM-dd}/${LOG_FILE_NAME}-rol-%d{yyyy-MM-dd}.%i.log">
            <!-- 日志级别过滤器 -->
            <ThresholdFilter level="debug" onMatch="ACCEPT" onMismatch="DENY" />
            <!-- 日志消息格式 -->
            <PatternLayout pattern="${LOG_PATTERN}" charset="UTF-8"/>
            <Policies>
                <!-- 在系统启动时，出发拆分规则，生产一个新的日志文件 -->
<!--                <OnStartupTriggeringPolicy />-->
                <!-- 按照文件大小拆分，2MB -->
                <SizeBasedTriggeringPolicy size="2MB" />
                <!-- 按照时间节点拆分，规则根据filePattern定义的 -->
                <TimeBasedTriggeringPolicy />
            </Policies>
            <!-- 在同一个目录下，文件的个限定为 30个，超过进行覆盖 -->
            <DefaultRolloverStrategy max="30" />
        </RollingFile>

        <RollingFile name="GlobalInterceptLogger_rollingFile" fileName="${LOG_HOME}/${LOG_FILE_NAME}_globalInterceptLogger-rol.log"
                     filePattern="${LOG_HOME}/$${date:yyyy-MM-dd}/${LOG_FILE_NAME}_globalInterceptLogger-rol-%d{yyyy-MM-dd}.%i.log">
            <!-- 日志级别过滤器 -->
            <ThresholdFilter level="debug" onMatch="ACCEPT" onMismatch="DENY" />
            <!-- 日志消息格式 -->
            <PatternLayout pattern="${LOG_PATTERN}" />
            <Policies>
                <!-- 在系统启动时，出发拆分规则，生产一个新的日志文件 -->
<!--                <OnStartupTriggeringPolicy />-->
                <!-- 按照文件大小拆分，2MB -->
                <SizeBasedTriggeringPolicy size="2MB" />
                <!-- 按照时间节点拆分，规则根据filePattern定义的 -->
                <TimeBasedTriggeringPolicy />
            </Policies>
            <!-- 在同一个目录下，文件的个限定为 30个，超过进行覆盖 -->
            <DefaultRolloverStrategy max="30" />
        </RollingFile>
    </Appenders>

    <!-- logger 定义 -->
    <Loggers>
        <logger name="logger_GlobalInterceptLogger" level="INFO" additivity="false">
            <AppenderRef ref="Console"/>
            <AppenderRef ref="GlobalInterceptLogger_rollingFile"/>
        </logger>
        <!-- 使用 rootLogger 配置 日志级别 level="trace" -->
        <Root level="INFO">
            <!-- 指定日志使用的处理器 -->
            <AppenderRef ref="Console" />
            <!--            <AppenderRef ref="file" />-->
            <AppenderRef ref="rollingFile" />
            <!--            <AppenderRef ref="accessFile" />-->
        </Root>
    </Loggers>
</configuration>