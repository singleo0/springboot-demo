<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns="http://www.springframework.org/schema/beans" xmlns:jdbc="http://www.springframework.org/schema/jdbc"
       xmlns:context="http://www.springframework.org/schema/context" xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans-4.0.xsd http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd">

    <!-- 配置数据库相关参数 properties的属性：${url} -->
    <context:property-placeholder location="classpath:app/properties/jdbc.properties"/>
<!--    <bean id="propertyPlaceholderConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">-->
<!--        <property name="locations">-->
<!--            <list>-->
<!--                &lt;!&ndash; dataSourse连接池相关属性 &ndash;&gt;-->
<!--                <value>classpath:jdbc.properties</value>-->
<!--            </list>-->
<!--        </property>-->
<!--    </bean>-->

    <bean id="dataSource1" class="com.alibaba.druid.pool.DruidDataSource"
          init-method="init" destroy-method="close">
        <!-- 数据源驱动类可不写，Druid默认会自动根据URL识别DriverClass -->
        <property name="driverClassName" value="${jdbc.driver1}"/>

        <!-- 基本属性 url、user、password -->
        <property name="url" value="${jdbc.url1}"/>
        <property name="username" value="${jdbc.username1}"/>
        <property name="password" value="${jdbc.password1}"/>

        <!-- 配置初始化大小、最小、最大 -->
        <property name="initialSize" value="${jdbc.pool.init}"/>
        <property name="minIdle" value="${jdbc.pool.minIdle}"/>
        <property name="maxActive" value="${jdbc.pool.maxActive}"/>

        <!-- 配置获取连接等待超时的时间 -->
        <property name="maxWait" value="60000"/>

        <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
        <property name="timeBetweenEvictionRunsMillis" value="60000"/>

        <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
        <property name="minEvictableIdleTimeMillis" value="300000"/>

        <property name="validationQuery" value="${jdbc.testSql}"/>
        <property name="testWhileIdle" value="true"/>
        <property name="testOnBorrow" value="false"/>
        <property name="testOnReturn" value="false"/>
        <!-- 打开PSCache，并且指定每个连接上PSCache的大小（Oracle使用） -->
        <!-- <property name="poolPreparedStatements"
                   value="true"/>
         <property name="maxPoolPreparedStatementPerConnectionSize"
                   value="20"/>-->
        <!-- 配置监控统计拦截的filters -->
        <property name="filters" value="stat"/>
    </bean>

<!--    <bean id="dataSource2" class="com.alibaba.druid.pool.DruidDataSource"-->
<!--          init-method="init" destroy-method="close">-->
<!--        &lt;!&ndash; 数据源驱动类可不写，Druid默认会自动根据URL识别DriverClass &ndash;&gt;-->
<!--        <property name="driverClassName" value="${jdbc.driver2}"/>-->

<!--        &lt;!&ndash; 基本属性 url、user、password &ndash;&gt;-->
<!--        <property name="url" value="${jdbc.url2}"/>-->
<!--        <property name="username" value="${jdbc.username2}"/>-->
<!--        <property name="password" value="${jdbc.password2}"/>-->

<!--        &lt;!&ndash; 配置初始化大小、最小、最大 &ndash;&gt;-->
<!--        <property name="initialSize" value="${jdbc.pool.init}"/>-->
<!--        <property name="minIdle" value="${jdbc.pool.minIdle}"/>-->
<!--        <property name="maxActive" value="${jdbc.pool.maxActive}"/>-->

<!--        &lt;!&ndash; 配置获取连接等待超时的时间 &ndash;&gt;-->
<!--        <property name="maxWait" value="60000"/>-->

<!--        &lt;!&ndash; 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 &ndash;&gt;-->
<!--        <property name="timeBetweenEvictionRunsMillis" value="60000"/>-->

<!--        &lt;!&ndash; 配置一个连接在池中最小生存的时间，单位是毫秒 &ndash;&gt;-->
<!--        <property name="minEvictableIdleTimeMillis" value="300000"/>-->

<!--        <property name="validationQuery" value="${jdbc.testSql}"/>-->
<!--        <property name="testWhileIdle" value="true"/>-->
<!--        <property name="testOnBorrow" value="false"/>-->
<!--        <property name="testOnReturn" value="false"/>-->
<!--        &lt;!&ndash; 打开PSCache，并且指定每个连接上PSCache的大小（Oracle使用） &ndash;&gt;-->
<!--        &lt;!&ndash; <property name="poolPreparedStatements"-->
<!--                   value="true"/>-->
<!--         <property name="maxPoolPreparedStatementPerConnectionSize"-->
<!--                   value="20"/>&ndash;&gt;-->
<!--        &lt;!&ndash; 配置监控统计拦截的filters &ndash;&gt;-->
<!--        <property name="filters" value="stat"/>-->
<!--    </bean>-->

    <bean id="sqlSessionFactory1" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource1"/>
        <property name="typeAliasesPackage" value="com.singleo.springboot.app.entity"/>
        <property name="mapperLocations" value="classpath:app/mapper/*.xml"/>
    </bean>
<!--    <bean id="sqlSessionFactory2" class="org.mybatis.spring.SqlSessionFactoryBean">-->
<!--        <property name="dataSource" ref="dataSource2"/>-->
<!--        <property name="typeAliasesPackage" value="com.ccb.storage.server.beans"/>-->
<!--        <property name="mapperLocations" value="classpath:app/mapper/*.xml"/>-->
<!--    </bean>-->
    <bean id="mapperConfig1" class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <!-- spring会自动查找该包下的类 -->
        <property name="basePackage" value="com.singleo.springboot.app.dao" />
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory1"/>
    </bean>
<!--    <bean id="mapperConfig2" class="org.mybatis.spring.mapper.MapperScannerConfigurer">-->
<!--        &lt;!&ndash; spring会自动查找该包下的类 &ndash;&gt;-->
<!--        <property name="basePackage" value="com.singleo.springboot.app.dao" />-->
<!--        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory2"/>-->
<!--    </bean>-->


    <!--配置事务管理器(mybatis采用的是JDBC的事务管理器)-->
    <bean id="transactionManager1" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
            <property name="dataSource" ref="dataSource1"/>
    </bean>

<!--    <bean id="transactionManager2" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">-->
<!--        <property name="dataSource" ref="dataSource2"/>-->
<!--    </bean>-->

    <!--    <aop:aspectj-autoproxy/>-->
    <!--    <tx:advice id="advice" transaction-manager="transactionManager1">-->
    <!--        <tx:attributes>-->
    <!--            <tx:method name="insert*" propagation="REQUIRED" isolation="READ_COMMITTED" read-only="false"/>-->
    <!--        </tx:attributes>-->
    <!--    </tx:advice>-->
    <!--    <aop:config>-->
    <!--        <aop:advisor pointcut="execution(* com.singleo.springboot.service.impl.*.*(..))" advice-ref="advice"/>-->
    <!--    </aop:config>-->

    <!--配置基于注解的声明式事务,默认使用注解来管理事务行为-->
    <tx:annotation-driven proxy-target-class="true"  transaction-manager="transactionManager1"/>
</beans>